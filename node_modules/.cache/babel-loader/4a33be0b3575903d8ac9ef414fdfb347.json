{"ast":null,"code":"var _jsxFileName = \"/home/royal/Desktop/ustraachallenge/client/src/components/dashboard.js\";\nimport React, { Component } from 'react';\nimport { Layout } from 'antd';\nimport GroupCard from './card';\nimport Nav from './nav';\nimport _ from 'lodash';\nimport { Menu, Icon, Button } from 'antd';\nconst Header = Layout.Header,\n      Content = Layout.Content,\n      Footer = Layout.Footer;\n\nconst data = require('./data.json');\n\nexport default class dashboard extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      groups: [],\n      loaded: false\n    };\n\n    this.generateGroups = () => {\n      const ucl = data.concat();\n\n      const shuffle = array => {\n        var currentIndex = array.length,\n            temporaryValue,\n            randomIndex; // While there remain elements to shuffle...\n\n        while (0 !== currentIndex) {\n          // Pick a remaining element...\n          randomIndex = Math.floor(Math.random() * currentIndex);\n          currentIndex -= 1; // And swap it with the current element.\n\n          temporaryValue = array[currentIndex];\n          array[currentIndex] = array[randomIndex];\n          array[randomIndex] = temporaryValue;\n        }\n\n        return array;\n      };\n\n      shuffle(ucl);\n\n      function getGroups() {\n        const group = []; // cmaking an array of winners\n\n        const winners = [];\n        ucl.forEach(element => {\n          if (element.winner) {\n            winners.push(element);\n          }\n        });\n\n        for (let x in winners) {\n          let tempArr = [];\n          let countryArr = [];\n          tempArr.push(winners[x]);\n          countryArr.push(winners[x].country); // console.log(\"winner\",winners[x]);\n          // console.log(\"country arr before loop\",countryArr);\n\n          for (let y in ucl) {\n            let count = 0;\n\n            while (tempArr.length < 4) {\n              count = count + 1;\n              const next = ucl[Math.floor(Math.random(0, ucl.length) * ucl.length)]; // console.log(\"next generated\",next);\n\n              const countryCount = countryArr.filter(el => {\n                return el === next.country;\n              }); // console.log(countryArr);\n              // console.log(\"countryValidation\",countryCount);\n\n              if (next.winner !== true && countryCount.length === 0) {\n                // console.log(\"pushed\");\n                tempArr.push(next);\n\n                _.pullAllBy(ucl, [{\n                  'name': next.name\n                }], 'name');\n\n                countryArr.push(next.country);\n                console.log(ucl.length);\n              }\n\n              if (count > 10) {\n                break;\n              }\n            } // console.log(\"temp ha ye\", group.push(tempArr));\n\n\n            group.push(tempArr);\n            break;\n          }\n        }\n\n        console.log(\"finaaaaaaaaaaal\", group[group.length - 1].length < 4);\n\n        if (group[group.length - 1].length < 4 || group[group.length - 2].length < 4) {\n          return -1;\n        } else {\n          return group;\n        }\n      }\n\n      return getGroups();\n    };\n\n    this.renderGroups = () => {\n      return this.state.groups.map((elem, i) => React.createElement(GroupCard, {\n        data: elem,\n        index: i,\n        key: i,\n        className: \"box\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      }));\n    };\n  }\n\n  componentDidMount() {\n    let final = this.generateGroups();\n    console.log(final);\n\n    if (final === -1) {\n      // this.generateGroups()\n      this.setState({\n        posts: []\n      });\n      console.log(final);\n    } else {\n      this.setState({\n        groups: final,\n        loaded: true\n      });\n    }\n  }\n\n  render() {\n    //component won't render until the data is fetched\n    console.log(this.state);\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }, React.createElement(Layout, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, React.createElement(Nav, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }), React.createElement(Header, {\n      className: \"header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      style: {\n        textAlign: 'center'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }, React.createElement(Menu // onClick={this.handleClick}\n    , {\n      mode: \"horizontal\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, React.createElement(Menu.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }, React.createElement(Button, {\n      onClick: onclick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }, \"Re -Draw\"))))), React.createElement(Content, {\n      style: {\n        background: '#fff',\n        padding: 24,\n        marginTop: 35,\n        minHeight: 280\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"drawGrid\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }, this.state.loaded && this.renderGroups()))));\n  }\n\n}","map":{"version":3,"sources":["/home/royal/Desktop/ustraachallenge/client/src/components/dashboard.js"],"names":["React","Component","Layout","GroupCard","Nav","_","Menu","Icon","Button","Header","Content","Footer","data","require","dashboard","state","groups","loaded","generateGroups","ucl","concat","shuffle","array","currentIndex","length","temporaryValue","randomIndex","Math","floor","random","getGroups","group","winners","forEach","element","winner","push","x","tempArr","countryArr","country","y","count","next","countryCount","filter","el","pullAllBy","name","console","log","renderGroups","map","elem","i","componentDidMount","final","setState","posts","render","textAlign","onclick","background","padding","marginTop","minHeight"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,MAAT,QAAuB,MAAvB;AACA,OAAOC,SAAP,MAAsB,QAAtB;AACA,OAAOC,GAAP,MAAgB,OAAhB;AACA,OAAOC,CAAP,MAAc,QAAd;AACA,SAAQC,IAAR,EAAaC,IAAb,EAAmBC,MAAnB,QAAgC,MAAhC;MACQC,M,GAA4BP,M,CAA5BO,M;MAAQC,O,GAAoBR,M,CAApBQ,O;MAASC,M,GAAWT,M,CAAXS,M;;AACzB,MAAMC,IAAI,GAAGC,OAAO,CAAC,aAAD,CAApB;;AAEA,eAAe,MAAMC,SAAN,SAAwBb,SAAxB,CAAkC;AAAA;AAAA;AAAA,SAC7Cc,KAD6C,GACrC;AACJC,MAAAA,MAAM,EAAE,EADJ;AAEJC,MAAAA,MAAM,EAAE;AAFJ,KADqC;;AAAA,SAM7CC,cAN6C,GAM7B,MAAK;AACjB,YAAMC,GAAG,GAAGP,IAAI,CAACQ,MAAL,EAAZ;;AACA,YAAMC,OAAO,GAAIC,KAAD,IAAW;AACvB,YAAIC,YAAY,GAAGD,KAAK,CAACE,MAAzB;AAAA,YAAiCC,cAAjC;AAAA,YAAiDC,WAAjD,CADuB,CAEvB;;AACA,eAAO,MAAMH,YAAb,EAA2B;AACvB;AACAG,UAAAA,WAAW,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBN,YAA3B,CAAd;AACAA,UAAAA,YAAY,IAAI,CAAhB,CAHuB,CAIvB;;AACAE,UAAAA,cAAc,GAAGH,KAAK,CAACC,YAAD,CAAtB;AACAD,UAAAA,KAAK,CAACC,YAAD,CAAL,GAAsBD,KAAK,CAACI,WAAD,CAA3B;AACAJ,UAAAA,KAAK,CAACI,WAAD,CAAL,GAAqBD,cAArB;AACH;;AAED,eAAOH,KAAP;AACH,OAdD;;AAiBAD,MAAAA,OAAO,CAACF,GAAD,CAAP;;AAEA,eAASW,SAAT,GAAqB;AACjB,cAAMC,KAAK,GAAG,EAAd,CADiB,CAGrB;;AACA,cAAMC,OAAO,GAAG,EAAhB;AACAb,QAAAA,GAAG,CAACc,OAAJ,CAAYC,OAAO,IAAI;AACnB,cAAIA,OAAO,CAACC,MAAZ,EAAoB;AAChBH,YAAAA,OAAO,CAACI,IAAR,CAAaF,OAAb;AACH;AACJ,SAJD;;AAKA,aAAK,IAAIG,CAAT,IAAcL,OAAd,EAAuB;AACnB,cAAIM,OAAO,GAAG,EAAd;AACA,cAAIC,UAAU,GAAG,EAAjB;AACAD,UAAAA,OAAO,CAACF,IAAR,CAAaJ,OAAO,CAACK,CAAD,CAApB;AACAE,UAAAA,UAAU,CAACH,IAAX,CAAgBJ,OAAO,CAACK,CAAD,CAAP,CAAWG,OAA3B,EAJmB,CAKnB;AACA;;AACA,eAAK,IAAIC,CAAT,IAActB,GAAd,EAAmB;AACf,gBAAIuB,KAAK,GAAC,CAAV;;AACA,mBAAOJ,OAAO,CAACd,MAAR,GAAiB,CAAxB,EAA2B;AACvBkB,cAAAA,KAAK,GAACA,KAAK,GAAC,CAAZ;AACA,oBAAMC,IAAI,GAAGxB,GAAG,CAACQ,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,CAAY,CAAZ,EAAeV,GAAG,CAACK,MAAnB,IAA6BL,GAAG,CAACK,MAA5C,CAAD,CAAhB,CAFuB,CAGvB;;AACA,oBAAMoB,YAAY,GAAGL,UAAU,CAACM,MAAX,CAAkBC,EAAE,IAAI;AACzC,uBAAOA,EAAE,KAAKH,IAAI,CAACH,OAAnB;AACH,eAFoB,CAArB,CAJuB,CAOvB;AACA;;AACA,kBAAIG,IAAI,CAACR,MAAL,KAAgB,IAAhB,IAAyBS,YAAY,CAACpB,MAAb,KAAwB,CAArD,EAAyD;AACrD;AACAc,gBAAAA,OAAO,CAACF,IAAR,CAAaO,IAAb;;AACAtC,gBAAAA,CAAC,CAAC0C,SAAF,CAAY5B,GAAZ,EAAgB,CAAC;AAAE,0BAAOwB,IAAI,CAACK;AAAd,iBAAD,CAAhB,EAAwC,MAAxC;;AACAT,gBAAAA,UAAU,CAACH,IAAX,CAAgBO,IAAI,CAACH,OAArB;AACAS,gBAAAA,OAAO,CAACC,GAAR,CAAY/B,GAAG,CAACK,MAAhB;AAEH;;AACD,kBAAGkB,KAAK,GAAC,EAAT,EAAY;AACR;AACH;AACJ,aAtBc,CAuBf;;;AACAX,YAAAA,KAAK,CAACK,IAAN,CAAWE,OAAX;AACA;AACH;AACJ;;AAEDW,QAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA8BnB,KAAK,CAACA,KAAK,CAACP,MAAN,GAAa,CAAd,CAAL,CAAsBA,MAAtB,GAA6B,CAA3D;;AAEA,YAAKO,KAAK,CAACA,KAAK,CAACP,MAAN,GAAa,CAAd,CAAL,CAAsBA,MAAtB,GAA6B,CAA9B,IAAoCO,KAAK,CAACA,KAAK,CAACP,MAAN,GAAa,CAAd,CAAL,CAAsBA,MAAtB,GAA6B,CAArE,EAAwE;AACrE,iBAAO,CAAC,CAAR;AACF,SAFD,MAGI;AACJ,iBAAOO,KAAP;AACC;AACA;;AACD,aAAOD,SAAS,EAAhB;AACH,KAnF4C;;AAAA,SAsG7CqB,YAtG6C,GAsG9B,MAAI;AACf,aAAO,KAAKpC,KAAL,CAAWC,MAAX,CAAkBoC,GAAlB,CAAsB,CAACC,IAAD,EAAMC,CAAN,KACzB,oBAAC,SAAD;AAAW,QAAA,IAAI,EAAED,IAAjB;AAAuB,QAAA,KAAK,EAAEC,CAA9B;AAAiC,QAAA,GAAG,EAAEA,CAAtC;AAAyC,QAAA,SAAS,EAAC,KAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADG,CAAP;AAGH,KA1G4C;AAAA;;AAoF5CC,EAAAA,iBAAiB,GAAE;AAChB,QAAKC,KAAK,GAAG,KAAKtC,cAAL,EAAb;AACA+B,IAAAA,OAAO,CAACC,GAAR,CAAYM,KAAZ;;AACA,QAAGA,KAAK,KAAG,CAAC,CAAZ,EAAc;AACV;AACA,WAAKC,QAAL,CAAc;AACVC,QAAAA,KAAK,EAAC;AADI,OAAd;AAGAT,MAAAA,OAAO,CAACC,GAAR,CAAYM,KAAZ;AAEH,KAPD,MAOK;AACD,WAAKC,QAAL,CAAc;AACVzC,QAAAA,MAAM,EAACwC,KADG;AAEVvC,QAAAA,MAAM,EAAC;AAFG,OAAd;AAIH;AACJ;;AAOD0C,EAAAA,MAAM,GAAG;AACL;AACAV,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKnC,KAAjB;AAEA,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEQ,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,EAEI,oBAAC,MAAD;AAAQ,MAAA,SAAS,EAAC,QAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEd;AAAK,MAAA,KAAK,EAAE;AAAE6C,QAAAA,SAAS,EAAE;AAAb,OAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACA,oBAAC,IAAD,CACI;AADJ;AAEI,MAAA,IAAI,EAAC,YAFT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAII,oBAAC,IAAD,CAAM,IAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,MAAD;AAAQ,MAAA,OAAO,EAAEC,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,CAJJ,CADA,CAFc,CAFJ,EAcI,oBAAC,OAAD;AAAS,MAAA,KAAK,EAAE;AAAEC,QAAAA,UAAU,EAAE,MAAd;AAAsBC,QAAAA,OAAO,EAAE,EAA/B;AAAmCC,QAAAA,SAAS,EAAE,EAA9C;AAAkDC,QAAAA,SAAS,EAAE;AAA7D,OAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEA;AAAK,MAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAGC,KAAKlD,KAAL,CAAWE,MAAX,IAAqB,KAAKkC,YAAL,EAHtB,CAFA,CAdJ,CAFR,CADJ;AA4BH;;AA3I4C","sourcesContent":["import React, { Component } from 'react'\nimport { Layout } from 'antd';\nimport GroupCard from './card'\nimport Nav from './nav'\nimport _ from 'lodash'\nimport {Menu,Icon, Button} from 'antd';\nconst { Header, Content, Footer } = Layout;\nconst data = require('./data.json')\n\nexport default class dashboard extends Component {\n    state = {\n        groups: [],\n        loaded: false\n    }\n\n    generateGroups= ()=> {\n        const ucl = data.concat()\n        const shuffle = (array) => {\n            var currentIndex = array.length, temporaryValue, randomIndex;\n            // While there remain elements to shuffle...\n            while (0 !== currentIndex) {\n                // Pick a remaining element...\n                randomIndex = Math.floor(Math.random() * currentIndex);\n                currentIndex -= 1;\n                // And swap it with the current element.\n                temporaryValue = array[currentIndex];\n                array[currentIndex] = array[randomIndex];\n                array[randomIndex] = temporaryValue;\n            }\n\n            return array;\n        }\n\n\n        shuffle(ucl)\n\n        function getGroups() {\n            const group = []\n\n        // cmaking an array of winners\n        const winners = []\n        ucl.forEach(element => {\n            if (element.winner) {\n                winners.push(element)\n            }\n        });\n        for (let x in winners) {\n            let tempArr = []\n            let countryArr = []\n            tempArr.push(winners[x])\n            countryArr.push(winners[x].country)\n            // console.log(\"winner\",winners[x]);\n            // console.log(\"country arr before loop\",countryArr);\n            for (let y in ucl) {\n                let count=0\n                while (tempArr.length < 4) {\n                    count=count+1\n                    const next = ucl[Math.floor(Math.random(0, ucl.length) * ucl.length)]\n                    // console.log(\"next generated\",next);\n                    const countryCount = countryArr.filter(el => {\n                        return el === next.country\n                    })\n                    // console.log(countryArr);\n                    // console.log(\"countryValidation\",countryCount);\n                    if (next.winner !== true && (countryCount.length === 0)) {\n                        // console.log(\"pushed\");\n                        tempArr.push(next)\n                        _.pullAllBy(ucl,[{ 'name':next.name }], 'name');\n                        countryArr.push(next.country)\n                        console.log(ucl.length);\n\n                    }\n                    if(count>10){\n                        break\n                    }\n                }\n                // console.log(\"temp ha ye\", group.push(tempArr));\n                group.push(tempArr)\n                break\n            }\n        }\n\n        console.log(\"finaaaaaaaaaaal\",group[group.length-1].length<4);\n\n        if ((group[group.length-1].length<4)|| (group[group.length-2].length<4)){\n           return -1\n        }\n        else{\n        return group\n        }\n        }\n        return getGroups()\n    }\n     componentDidMount(){\n        let  final = this.generateGroups()\n        console.log(final)\n        if(final===-1){\n            // this.generateGroups()\n            this.setState({\n                posts:[]\n            })\n            console.log(final);\n\n        }else{\n            this.setState({\n                groups:final,\n                loaded:true\n            })\n        }\n    }\n\n    renderGroups = ()=>{\n        return this.state.groups.map((elem,i)=>(\n            <GroupCard data={elem} index={i} key={i} className=\"box\" ></GroupCard>\n        ))\n    }\n    render() {\n        //component won't render until the data is fetched\n        console.log(this.state);\n\n        return (\n            <div>\n\n                    <Layout>\n                        <Nav></Nav>\n                        <Header className=\"header\">\n\n          <div style={{ textAlign: 'center' }}>\n          <Menu\n              // onClick={this.handleClick}\n              mode=\"horizontal\"\n            >\n              <Menu.Item>\n                <Button onClick={onclick}>Re -Draw</Button></Menu.Item>\n              </Menu>\n              </div>\n        </Header>\n                        <Content style={{ background: '#fff', padding: 24, marginTop: 35, minHeight: 280 }}>\n\n                        <div className=\"drawGrid\">{\n\n                        }\n                        {this.state.loaded && this.renderGroups()}\n                        </div>\n                        </Content>\n                    </Layout>\n            </div>\n        )\n    }\n}"]},"metadata":{},"sourceType":"module"}