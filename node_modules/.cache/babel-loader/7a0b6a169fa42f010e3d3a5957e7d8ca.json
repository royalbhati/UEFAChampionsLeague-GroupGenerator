{"ast":null,"code":"var _jsxFileName = \"/home/royal/Desktop/ustraachallenge/client/src/components/dashboard.js\";\nimport React, { Component } from 'react';\nimport { Layout } from 'antd';\nimport GroupCard from './card';\nimport Nav from './nav';\nimport _ from 'lodash';\nimport { Menu, Button } from 'antd';\nconst Content = Layout.Content;\n\nconst data = require('./data.json');\n\nexport default class dashboard extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      groups: [],\n      loaded: false\n    };\n\n    this.generateGroups = () => {\n      const ucl = data.concat();\n\n      const shuffle = array => {\n        var currentIndex = array.length,\n            temporaryValue,\n            randomIndex;\n\n        while (0 !== currentIndex) {\n          // Pick a remaining element...\n          randomIndex = Math.floor(Math.random() * currentIndex);\n          currentIndex -= 1; // And swap it with the current element.\n\n          temporaryValue = array[currentIndex];\n          array[currentIndex] = array[randomIndex];\n          array[randomIndex] = temporaryValue;\n        }\n\n        return array;\n      }; // Shuffling everytime to have random selection\n\n\n      shuffle(ucl);\n\n      function getGroups() {\n        const group = []; // making an array of winners\n\n        const winners = ucl.filter(element => {\n          return element.winner;\n        }); // iterating over the winners since there are only 8 groups and also 8 winners\n\n        for (let x in winners) {\n          //temporary Array to store single groups slected for the final batch\n          let tempArr = []; // country array to check theres only single country in each group\n\n          let countryArr = [];\n          tempArr.push(winners[x]);\n          countryArr.push(winners[x].country);\n\n          while (ucl.length !== 0) {\n            let count = 0; //loop over possible outcomes until we get a batch size of 4\n\n            while (tempArr.length < 4) {\n              count = count + 1;\n              const next = ucl[Math.floor(Math.random(0, ucl.length) * ucl.length)]; //array to check if theres an existing country\n\n              const countryCount = countryArr.filter(el => {\n                return el === next.country;\n              });\n\n              if (next.winner !== true && countryCount.length === 0) {\n                tempArr.push(next); //removes the club that is already selected into a group\n                // to avoid unecessary computaion\n\n                _.pullAllBy(ucl, [{\n                  'name': next.name\n                }], 'name');\n\n                countryArr.push(next.country);\n              }\n\n              if (count > 10) {\n                break;\n              }\n            }\n\n            group.push(tempArr);\n            break;\n          }\n        }\n\n        let totalTeams = 0;\n        group.map(el => {\n          el.map(elem => {\n            totalTeams = totalTeams + 1;\n          });\n        });\n\n        if (totalTeams < 32) {\n          return -1;\n        } else {\n          return group;\n        }\n      }\n\n      return getGroups();\n    };\n\n    this.renderGroups = () => {\n      return this.state.groups.map((elem, i) => React.createElement(GroupCard, {\n        data: elem,\n        index: i,\n        key: i,\n        className: \"box\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      }));\n    };\n\n    this.onclick = () => {\n      this.componentDidMount();\n    };\n  }\n\n  componentDidMount() {\n    let generatedGroups = this.generateGroups();\n\n    if (generatedGroups === -1) {\n      this.componentDidMount();\n    } else {\n      this.setState({\n        groups: generatedGroups,\n        loaded: true\n      });\n    }\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }, React.createElement(Layout, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }, React.createElement(Nav, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      className: \"logo bounce\",\n      onClick: () => this.onclick(),\n      src: require('../logo2.png'),\n      alt: \"logo\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      style: {\n        textAlign: 'center'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, \"sdfsdfds\")), React.createElement(Content, {\n      style: {\n        background: '#fff',\n        padding: 24,\n        marginTop: 35,\n        minHeight: 280\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"drawGrid\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }, this.state.loaded && this.renderGroups()))));\n  }\n\n}","map":{"version":3,"sources":["/home/royal/Desktop/ustraachallenge/client/src/components/dashboard.js"],"names":["React","Component","Layout","GroupCard","Nav","_","Menu","Button","Content","data","require","dashboard","state","groups","loaded","generateGroups","ucl","concat","shuffle","array","currentIndex","length","temporaryValue","randomIndex","Math","floor","random","getGroups","group","winners","filter","element","winner","x","tempArr","countryArr","push","country","count","next","countryCount","el","pullAllBy","name","totalTeams","map","elem","renderGroups","i","onclick","componentDidMount","generatedGroups","setState","render","textAlign","background","padding","marginTop","minHeight"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { Layout } from 'antd';\nimport GroupCard from './card'\nimport Nav from './nav'\nimport _ from 'lodash'\nimport { Menu, Button } from 'antd';\nconst  {Content} = Layout;\nconst data = require('./data.json')\n\nexport default class dashboard extends Component {\n    state = {\n        groups: [],\n        loaded: false\n    }\n\n    generateGroups = () => {\n        const ucl = data.concat()\n        const shuffle = (array) => {\n            var currentIndex = array.length, temporaryValue, randomIndex;\n\n            while (0 !== currentIndex) {\n                // Pick a remaining element...\n                randomIndex = Math.floor(Math.random() * currentIndex);\n                currentIndex -= 1;\n                // And swap it with the current element.\n                temporaryValue = array[currentIndex];\n                array[currentIndex] = array[randomIndex];\n                array[randomIndex] = temporaryValue;\n            }\n\n            return array;\n        }\n\n        // Shuffling everytime to have random selection\n        shuffle(ucl)\n\n        function getGroups() {\n            const group = []\n            // making an array of winners\n            const winners = ucl.filter(element => {\n                return element.winner\n            });\n            // iterating over the winners since there are only 8 groups and also 8 winners\n            for (let x in winners) {\n                //temporary Array to store single groups slected for the final batch\n                let tempArr = []\n                // country array to check theres only single country in each group\n                let countryArr = []\n                tempArr.push(winners[x])\n                countryArr.push(winners[x].country)\n\n                while(ucl.length!==0) {\n                    let count = 0\n                    //loop over possible outcomes until we get a batch size of 4\n                    while (tempArr.length < 4) {\n                        count = count + 1\n                        const next = ucl[Math.floor(Math.random(0, ucl.length) * ucl.length)]\n\n                        //array to check if theres an existing country\n                        const countryCount = countryArr.filter(el => {\n                            return el === next.country\n                        })\n\n                        if (next.winner !== true && (countryCount.length === 0)) {\n                            tempArr.push(next)\n                            //removes the club that is already selected into a group\n                            // to avoid unecessary computaion\n                            _.pullAllBy(ucl, [{ 'name': next.name }], 'name');\n                            countryArr.push(next.country)\n                        }\n                        if (count > 10) {\n                            break\n                        }\n                    }\n                    group.push(tempArr)\n                    break\n                }\n            }\n\n            let totalTeams = 0\n                group.map(el => { el.map(elem => {  totalTeams = totalTeams + 1 })})\n\n            if (totalTeams < 32) {\n                return -1\n            }\n            else {\n                return group\n            }\n        }\n        return getGroups()\n    }\n    componentDidMount() {\n        let generatedGroups = this.generateGroups()\n        if (generatedGroups === -1) {\n            this.componentDidMount()\n        } else {\n            this.setState({\n                groups: generatedGroups,\n                loaded: true\n            })\n        }\n    }\n\n    renderGroups = () => {\n        return this.state.groups.map((elem, i) => (\n            <GroupCard data={elem} index={i} key={i} className=\"box\" ></GroupCard>\n        ))\n    }\n    onclick = () => {\n        this.componentDidMount()\n    }\n    render() {\n        return (\n            <div>\n                <Layout>\n                    <Nav>\n\n\n                    {/* <button className=\"redraw\" onClick={() => this.onclick()}>Re-Draw</button> */}\n                    <img className=\"logo bounce\" onClick={() => this.onclick()} src={ require('../logo2.png') } alt=\"logo\" />\n\n\n                    </Nav>\n                    <div  style={{ textAlign: 'center' }}>\n                    <p>sdfsdfds</p>\n                    </div>\n\n                    <Content style={{ background: '#fff', padding: 24, marginTop: 35, minHeight: 280 }}>\n\n                        <div className=\"drawGrid\">{\n\n                        }\n                            {this.state.loaded && this.renderGroups()}\n                        </div>\n                    </Content>\n                </Layout>\n            </div>\n        )\n    }\n}"]},"metadata":{},"sourceType":"module"}