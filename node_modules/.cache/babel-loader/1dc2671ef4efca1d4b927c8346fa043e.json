{"ast":null,"code":"var _jsxFileName = \"/home/royal/Desktop/ustraachallenge/client/src/components/dashboard.js\";\nimport React, { Component } from 'react';\nimport { Layout } from 'antd';\nimport GroupCard from './card';\nimport Nav from './nav';\nimport _ from 'lodash';\n\nconst data = require('./data.json');\n\nconst Content = Layout.Content;\nexport default class dashboard extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      groups: [],\n      loaded: false\n    };\n\n    this.renderGroups = () => {\n      return this.state.groups.map((elem, i) => React.createElement(GroupCard, {\n        data: elem,\n        index: i,\n        key: i,\n        className: \"box\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      }));\n    };\n  }\n\n  componentDidMount() {\n    const ucl = data.concat();\n\n    const shuffle = array => {\n      var currentIndex = array.length,\n          temporaryValue,\n          randomIndex; // While there remain elements to shuffle...\n\n      while (0 !== currentIndex) {\n        // Pick a remaining element...\n        randomIndex = Math.floor(Math.random() * currentIndex);\n        currentIndex -= 1; // And swap it with the current element.\n\n        temporaryValue = array[currentIndex];\n        array[currentIndex] = array[randomIndex];\n        array[randomIndex] = temporaryValue;\n      }\n\n      return array;\n    };\n\n    shuffle(ucl);\n\n    function getGroups() {\n      const group = []; // cmaking an array of winners\n\n      const winners = [];\n      ucl.forEach(element => {\n        if (element.winner) {\n          winners.push(element);\n        }\n      });\n\n      for (let x in winners) {\n        let tempArr = [];\n        let countryArr = [];\n        tempArr.push(winners[x]);\n        countryArr.push(winners[x].country); // console.log(\"winner\",winners[x]);\n        // console.log(\"country arr before loop\",countryArr);\n\n        for (let y in ucl) {\n          while (tempArr.length < 4) {\n            const next = ucl[Math.floor(Math.random(0, ucl.length) * ucl.length)]; // console.log(\"next generated\",next);\n\n            const countryCount = countryArr.filter(el => {\n              return el === next.country;\n            }); // console.log(countryArr);\n            // console.log(\"countryValidation\",countryCount);\n\n            if (next.winner !== true && countryCount.length === 0) {\n              // console.log(\"pushed\");\n              tempArr.push(next);\n\n              _.pullAllBy(ucl, [{\n                'name': next.name\n              }], 'name');\n\n              countryArr.push(next.country);\n              console.log(ucl.length);\n            }\n          } // console.log(\"temp ha ye\", group.push(tempArr));\n\n\n          group.push(tempArr);\n          break;\n        }\n      }\n\n      return group;\n    }\n\n    this.setState({\n      groups: getGroups(),\n      loaded: true\n    });\n  }\n\n  render() {\n    //component won't render until the data is fetched\n    console.log(this.state);\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, React.createElement(Layout, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, React.createElement(Nav, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }), React.createElement(Content, {\n      style: {\n        background: '#fff',\n        padding: 24,\n        marginTop: 35,\n        minHeight: 280\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"drawGrid\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, this.state.loaded && this.renderGroups()))));\n  }\n\n}","map":{"version":3,"sources":["/home/royal/Desktop/ustraachallenge/client/src/components/dashboard.js"],"names":["React","Component","Layout","GroupCard","Nav","_","data","require","Content","dashboard","state","groups","loaded","renderGroups","map","elem","i","componentDidMount","ucl","concat","shuffle","array","currentIndex","length","temporaryValue","randomIndex","Math","floor","random","getGroups","group","winners","forEach","element","winner","push","x","tempArr","countryArr","country","y","next","countryCount","filter","el","pullAllBy","name","console","log","setState","render","background","padding","marginTop","minHeight"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { Layout } from 'antd';\nimport GroupCard from './card'\nimport Nav from './nav'\nimport _ from 'lodash'\nconst data = require('./data.json')\n\n\nconst { Content } = Layout;\nexport default class dashboard extends Component {\n    state = {\n        groups: [],\n        loaded: false\n    }\n     componentDidMount(){\n\n        const ucl = data.concat()\n        const shuffle = (array) => {\n            var currentIndex = array.length, temporaryValue, randomIndex;\n            // While there remain elements to shuffle...\n            while (0 !== currentIndex) {\n                // Pick a remaining element...\n                randomIndex = Math.floor(Math.random() * currentIndex);\n                currentIndex -= 1;\n                // And swap it with the current element.\n                temporaryValue = array[currentIndex];\n                array[currentIndex] = array[randomIndex];\n                array[randomIndex] = temporaryValue;\n            }\n\n            return array;\n        }\n\n\n        shuffle(ucl)\n\n        function getGroups() {\n            const group = []\n\n        // cmaking an array of winners\n        const winners = []\n        ucl.forEach(element => {\n            if (element.winner) {\n                winners.push(element)\n            }\n        });\n        for (let x in winners) {\n            let tempArr = []\n            let countryArr = []\n            tempArr.push(winners[x])\n            countryArr.push(winners[x].country)\n            // console.log(\"winner\",winners[x]);\n            // console.log(\"country arr before loop\",countryArr);\n            for (let y in ucl) {\n                while (tempArr.length < 4) {\n                    const next = ucl[Math.floor(Math.random(0, ucl.length) * ucl.length)]\n                    // console.log(\"next generated\",next);\n                    const countryCount = countryArr.filter(el => {\n                        return el === next.country\n                    })\n                    // console.log(countryArr);\n                    // console.log(\"countryValidation\",countryCount);\n                    if (next.winner !== true && (countryCount.length === 0)) {\n                        // console.log(\"pushed\");\n                        tempArr.push(next)\n                        _.pullAllBy(ucl,[{ 'name':next.name }], 'name');\n                        countryArr.push(next.country)\n                        console.log(ucl.length);\n\n                    }\n                }\n                // console.log(\"temp ha ye\", group.push(tempArr));\n                group.push(tempArr)\n                break\n            }\n        }\n        return group\n        }\n        this.setState({\n            groups:getGroups(),\n            loaded:true\n        })\n    }\n\n    renderGroups = ()=>{\n        return this.state.groups.map((elem,i)=>(\n            <GroupCard data={elem} index={i} key={i} className=\"box\" ></GroupCard>\n        ))\n    }\n    render() {\n        //component won't render until the data is fetched\n        console.log(this.state);\n\n        return (\n            <div>\n\n                    <Layout>\n                        <Nav></Nav>\n                        <Content style={{ background: '#fff', padding: 24, marginTop: 35, minHeight: 280 }}>\n\n                        <div className=\"drawGrid\">{\n\n                        }\n                        {this.state.loaded && this.renderGroups()}\n                        </div>\n                        </Content>\n                    </Layout>\n            </div>\n        )\n    }\n}"]},"metadata":{},"sourceType":"module"}